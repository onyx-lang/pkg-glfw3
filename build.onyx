#load "./module"

use core {*}
use cbindgen {*}
use glfw3

main :: () {
    path := module_path(#file);

    c_file_path := string.concat(path, "onyx_glfw3.c");

    result := generate_c_binding(.{
        output_file = c_file_path,
        foreign_block = glfw3.foreign_block,

        cast_map = .[
            .{ glfw3.GLFWmonitor_p, "GLFWmonitor *" },
            .{ glfw3.GLFWwindow_p, "GLFWwindow *" },
            .{ glfw3.GLFWcursor_p, "GLFWcursor *" },
        ],

        preamble = .[
"""
#include <GLFW/glfw3.h>

#define __glfwGetLoadProcAddress() (unsigned long long) &glfwGetProcAddress

#define _EXPAND(...) __VA_ARGS__
#define GLFW_HOOK(callback_name, c_args, wasm_args) \
    static wasm_func_t* __glfw_callback_##callback_name ; \
    static void __glfw_##callback_name (GLFWwindow *window, _EXPAND c_args) { \
        wasm_val_t args[] = { WASM_I64_VAL((unsigned long long) window), _EXPAND wasm_args }; \
        wasm_val_vec_t args_array = WASM_ARRAY_VEC(args); \
        wasm_val_vec_t results = WASM_EMPTY_VEC; \
        runtime->wasm_func_call(__glfw_callback_##callback_name , &args_array, &results); \
    } \
    ONYX_DEF(callback_name, (LONG, PTR, INT), ()) { \
        GLFWwindow *window = (GLFWwindow *) params->data[0].of.i64; \
        char name[512]; \
        strncpy(name, ONYX_PTR(params->data[1].of.i32), params->data[2].of.i32); \
        name[params->data[2].of.i32] = '\\0'; \
        __glfw_callback_##callback_name = runtime->wasm_extern_as_func(runtime->wasm_extern_lookup_by_name(runtime->wasm_module, runtime->wasm_instance, name)); \
        callback_name(window, __glfw_##callback_name); \
        return NULL; \
    }
"""
        ],

        custom_implementations = .[
            .{ "glfwSetKeyCallback", """
                GLFW_HOOK(glfwSetKeyCallback, (int key, int scancode, int actions, int mods),
                    (WASM_I32_VAL(key), WASM_I32_VAL(scancode), WASM_I32_VAL(actions), WASM_I32_VAL(mods)))"""
            },
            .{ "glfwSetCharCallback", """
                GLFW_HOOK(glfwSetCharCallback, (unsigned int ch),
                    (WASM_I32_VAL(ch)))"""
            },
            .{ "glfwSetCharModsCallback", """
                GLFW_HOOK(glfwSetCharModsCallback, (unsigned int ch, int mods),
                    (WASM_I32_VAL(ch), WASM_I32_VAL(mods)))"""
            },
            .{ "glfwSetMouseButtonCallback", """
                GLFW_HOOK(glfwSetMouseButtonCallback, (int button, int action, int mods),
                    (WASM_I32_VAL(button), WASM_I32_VAL(action), WASM_I32_VAL(mods)))"""
            },
            .{ "glfwSetCursorPosCallback", """
                GLFW_HOOK(glfwSetCursorPosCallback, (double xpos, double ypos),
                    (WASM_F64_VAL(xpos), WASM_F64_VAL(ypos)))"""
            },
            .{ "glfwSetCursorEnterCallback", """
                GLFW_HOOK(glfwSetCursorEnterCallback, (int entered),
                    (WASM_I32_VAL(entered)))"""
            },
            .{ "glfwSetScrollCallback", """
                GLFW_HOOK(glfwSetScrollCallback, (double dx, double dy),
                    (WASM_F64_VAL(dx), WASM_F64_VAL(dy)))"""
            },
            .{ "glfwSetWindowSizeCallback", """
                GLFW_HOOK(glfwSetWindowSizeCallback, (int width, int height),
                    (WASM_I32_VAL(width), WASM_I32_VAL(height)))"""
            },
        ],
    });

    if !result {
        os.exit(1);
    }

    result = compile_c_file(c_file_path, string.concat(path, "onyx_glfw3"), libraries=.["glfw"]);
    if !result {
        os.exit(1);
    }

    os.remove_file(c_file_path);
}
